package application;

import java.net.URL;
import java.util.ResourceBundle;

import datos.CRUDVenta;
import datos.Security;
import datos.Venta;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.scene.control.TableView;

import javafx.scene.control.TableColumn;

public class BuscadorVentaController implements Initializable{
	@FXML
	private Button BuscarBtn;
	@FXML
	private TextField IdTxt;
	@FXML
	private TextField CedClienteTxt;
	@FXML
	private TableView<Venta> VentaTable;
	@FXML
	private TableColumn<Venta, String> IdColumn;
	@FXML
	private TableColumn<Venta, String> FechaColumn;
	@FXML
	private TableColumn<Venta, String> CedVendedorColumn;
	@FXML
	private TableColumn<Venta, String> CedClienteColumn1;
	@FXML
	private Button VolverBtn;
	private ObservableList<Venta> venta = FXCollections.observableArrayList();
	private CRUDVenta CRUDVenta;
	public BuscadorVentaController() {
        this.CRUDVenta = new CRUDVenta();}

	// Event Listener on Button[#BuscarBtn].onMouseClicked
	@FXML
	public void ClickBuscar(MouseEvent event) {
		// TODO Autogenerated
		String id = IdTxt.getText();
		String cedcliente = CedClienteTxt.getText();	
		this.VentaTable.getItems().clear();
		ObservableList<Venta> info = FXCollections.observableArrayList(CRUDVenta.Mostrar(id, cedcliente));
		this.VentaTable.setItems(info);}
	// Event Listener on Button[#VolverBtn].onMouseClicked
	@FXML
	public void ClickVolver(MouseEvent event) {
		String puesto = Security.ComprobarPuesto().toUpperCase();
		if (puesto.equals("ADMIN")) {
			CargarLoginAdmin LA = new CargarLoginAdmin((Stage)this.VolverBtn.getScene().getWindow());}
		else if (puesto.equals("GERENTE")) {
			CargarLoginGerente LG = new CargarLoginGerente((Stage)this.VolverBtn.getScene().getWindow());}
		else if (puesto.equals("VENDEDOR")) {
			CargarLoginVendedor LV = new CargarLoginVendedor((Stage)this.VolverBtn.getScene().getWindow());}}
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		VentaTable.setEditable(true);
		IdColumn.setCellFactory(TextFieldTableCell.forTableColumn());
		FechaColumn.setCellFactory(TextFieldTableCell.forTableColumn());
		CedVendedorColumn.setCellFactory(TextFieldTableCell.forTableColumn());
		CedClienteColumn1.setCellFactory(TextFieldTableCell.forTableColumn());
		this.CRUDVenta = new CRUDVenta();
		this.IdColumn.setCellValueFactory(new PropertyValueFactory<Venta, String>("id"));
		this.FechaColumn.setCellValueFactory(new PropertyValueFactory<Venta, String>("fecha"));
		this.CedVendedorColumn.setCellValueFactory(new PropertyValueFactory<Venta, String>("CED_EMPLEADO"));
		this.CedClienteColumn1.setCellValueFactory(new PropertyValueFactory<Venta, String>("DOC_NUM_CLIENTE"));
		VentaTable.setItems(this.venta);						
		IdColumn.setOnEditCommit(event -> {
            Venta e = event.getRowValue();
            e.setId(event.getNewValue());
            e.setEditado(true);});
        FechaColumn.setOnEditCommit(event -> {
        	Venta e = event.getRowValue();
        	e.setFecha(event.getNewValue());
        	e.setEditado(true);});
        CedVendedorColumn.setOnEditCommit(event -> {
        	Venta e = event.getRowValue();
        	e.setCedulaEmpleado(event.getNewValue());
        	e.setEditado(true);});
        CedClienteColumn1.setOnEditCommit(event -> {
        	Venta e = event.getRowValue();
        	e.setDocNumCliente(event.getNewValue());
        	e.setEditado(true);});}}